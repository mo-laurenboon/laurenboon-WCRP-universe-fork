name: Create new version
on:
  workflow_run:
    workflows: "validate json files"
    types: completed
permissions:
  contents: write 
jobs:
  create-version:
    if: ${{ github.event.workflow_run.conclusion }} == "success"
    runs-on: ubuntu-latest
    steps: 
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get latest version
        id: get_old_version
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1)

          if [ -z "$LATEST_TAG" ]; then
            NEW_VERSION="v1.0.0"
            echo "First release"
          else
            NUMBER=${LATEST_TAG#v}
            echo "number=$NUMBER" >> $GITHUB_OUTPUT
            echo "Previous version: $LATEST_TAG"
          fi
      - name: Get commit history
        id: get_commit_history
        run: |
          CHANGES=$(git diff --name-status HEAD~1 HEAD -- 'src-data/*.json')
          echo "changes=$CHANGES" >> $GITHUB_OUTPUT
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Create new version
        id: get_new_version
        run: |
          NUMBER=${{ steps.get_old_version.outputs.number }}
          CHNAGES=${{ steps.get_commit_history.outputs.changes }}
          python scripts/create-new-version.py $NUMBER $CHANGES
          echo "New version : ${{ steps.get_new_version.outputs.version }}"
      - name: Generate release notes
        id: release_notes
        run: |
          LAST_TAG=$(git tag -l "v*" | sort -V | tail -n 1)

          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges | head -n 20)
          fi

          cat > release_notes.md <<EOF
          **Release Date:** $(date +'%Y-%m-%d %H:%M:%S UTC')
          $COMMITS
          - New JSON file
          View the published data at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/EOF
          cat release_notes.md
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.get_new_version.outputs.version }}"
          gh release create "$VERSION" \
            --title "Release $VERSION" \
            --notes-file release_notes.md \
            --target store-src-data
      - name: Upload data as release assets
        env:
          GH_TOKEN : ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.get_new_version.outputs.version }}"
          cd src-data
          zip -r ../src-data-${VERSION}.zip .
          cd ..
          gh release upload "$VERSION" src-data-${VERSION}.zip
